import os
import cv2
import numpy as np
import torch
import torch.utils.data as Data
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torchsummary import summary

class CreateDataset:
    def create_dataset(self, folder, IMG_WIDTH, IMG_HEIGHT):
        img_data_array = []
        class_name = []
        classes = {'social_security': [0, 0, 1]}  # Example class encoding
        
        if not os.path.exists(folder):
            print(f"Directory does not exist: {folder}")
            return np.array(img_data_array), np.array(class_name)

        for PATH, dirs, files in os.walk(folder):
            print(f"Checking directory: {PATH}")
            for file in files:
                print(f"Found file: {file}")
                if file.lower().endswith(('.png', '.jpg', '.jpeg', '.tiff', '.bmp', '.gif')):
                    image_path = os.path.join(PATH, file)
                    print(f"Processing file: {image_path}")
                    image = cv2.imread(image_path)
                    if image is not None:
                        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
                        image = cv2.resize(image, (IMG_WIDTH, IMG_HEIGHT), interpolation=cv2.INTER_AREA)
                        image = image.astype('float32') / 255.0  # Normalize the image
                        if len(image.shape) == 3:
                            img_data_array.append(np.array(image).transpose((2, 0, 1)))  # Change shape to [3, IMG_HEIGHT, IMG_WIDTH]
                            class_name.append(classes['social_security'])
                        else:
                            print(f"Skipping file due to incorrect shape: {image_path}")
                    else:
                        print(f"Failed to read file: {image_path}")
        return np.array(img_data_array), np.array(class_name)

# Set the paths to your data folders
Train_folder = 'C:\\Users\\User\\Downloads\\7 pytorch_cnn\\Input\\Data\\Training_data\\social_security'
Test_folder = 'C:\\Users\\User\\Downloads\\7 pytorch_cnn\\Input\\Data\\Testing_Data\\social_security'

IMG_WIDTH = 200
IMG_HEIGHT = 200

# Load the training and testing data using the CreateDataset class:
print("Loading Training Data")
Train_img_data, train_class_name = CreateDataset().create_dataset(Train_folder, IMG_WIDTH, IMG_HEIGHT)
print(f"Training Data Loaded: {len(Train_img_data)} images")

print("Loading Testing Data")
Test_img_data, test_class_name = CreateDataset().create_dataset(Test_folder, IMG_WIDTH, IMG_HEIGHT)
print(f"Testing Data Loaded: {len(Test_img_data)} images")

# Check if datasets are not empty
assert len(Train_img_data) > 0, "No training data found"
assert len(Test_img_data) > 0, "No testing data found"

train_images = torch.Tensor(Train_img_data)
train_labels = torch.Tensor(train_class_name)
test_images = torch.Tensor(Test_img_data)
test_labels = torch.Tensor(test_class_name)

# Create PyTorch datasets
train_dataset = Data.TensorDataset(train_images, train_labels)
test_dataset = Data.TensorDataset(test_images, test_labels)

trainloader = Data.DataLoader(train_dataset, batch_size=4, shuffle=True, num_workers=2)
testloader = Data.DataLoader(test_dataset, batch_size=4, shuffle=False, num_workers=2)

# Initialize the CNNNet model
class CNNNet(nn.Module):
    def __init__(self):
        super(CNNNet, self).__init__()
        self.conv1 = nn.Conv2d(3, 6, 5)
        self.pool = nn.MaxPool2d(2, 2)
        self.conv2 = nn.Conv2d(6, 16, 5)
        self.fc1 = nn.Linear(16 * 47 * 47, 120)
        self.fc2 = nn.Linear(120, 84)
        self.fc3 = nn.Linear(84, 3)

    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x)))
        x = x.view(-1, 16 * 47 * 47)
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return x

model = CNNNet()

# Train the model
root_dir = 'C:\\model'
os.makedirs(root_dir, exist_ok=True)  # Ensure the directory exists

def TrainModel(model, root_dir, trainloader, testloader, num_epochs=10):
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.9)
    for epoch in range(num_epochs):
        running_loss = 0.0
        for i, data in enumerate(trainloader, 0):
            inputs, labels = data
            labels = torch.argmax(labels, dim=1)
            optimizer.zero_grad()
            outputs = model(inputs)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()
            running_loss += loss.item()
            if i % 2000 == 1999:
                print('[%d, %5d] loss: %.3f' % (epoch + 1, i + 1, running_loss / 2000))
                running_loss = 0.0
    print('Finished Training')
    torch.save(model.state_dict(), os.path.join(root_dir, 'model_weights.pth'))

TrainModel(model, root_dir, trainloader, testloader, num_epochs=10)

# Load the model for evaluation
model.load_state_dict(torch.load(os.path.join(root_dir, 'model_weights.pth')))
model.eval()

correct = 0
total = 0
with torch.no_grad():
    for data in testloader:
        images, labels = data
        labels = torch.argmax(labels, dim=1)
        outputs = model(images)
        _, predicted = torch.max(outputs.data, 1)
        total += labels.size(0)
        correct += (predicted == labels).sum().item()

print('Accuracy of the network on the test images: %d %%' % (100 * correct / total))

# Print the model summary
summary(model, (3, IMG_WIDTH, IMG_HEIGHT))
